/**
 *
 */
package com.objectfrontier.training.ws.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import com.objectfrontier.training.ws.connection.ConnectionSetup;
import com.objectfrontier.training.ws.exception.AppErrorCode;
import com.objectfrontier.training.ws.exception.AppException;
import com.objectfrontier.training.ws.pojo.Address;
import com.objectfrontier.training.ws.util.ServiceConstant;


/**
 * @author mohammed.mohammed
 * @since  Oct 6, 2018
 */
public class AddressService implements ServiceConstant {

    private boolean isEmpty(String stringToBeChecked) {
        return Objects.isNull(stringToBeChecked) || stringToBeChecked.equals("");
    }

    public List<AppErrorCode> validateAddress(Address addressDetails, Connection connection) {
        List<AppErrorCode> exceptionList = new ArrayList<>();

        if (isEmpty(addressDetails.getStreet())) {
            exceptionList.add(AppErrorCode.ERROR_NULL_STREET);
        }

        if (isEmpty(addressDetails.getCity())) {
            exceptionList.add(AppErrorCode.ERROR_NULL_CITY);
        }

        if (addressDetails.getPostalCode() == 0) {
            exceptionList.add(AppErrorCode.ERROR_NULL_POSTAL_CODE);
        }

        return exceptionList;
    }

    public Address createAddress(Address addressDetails) {

        Connection connection = ConnectionSetup.connectionThread.get();
        List<AppErrorCode> exceptionList = validateAddress(addressDetails, connection);

        try {
            PreparedStatement insertStatement =  connection.prepareStatement(INSERT_ADDRESS_QUERY, Statement.RETURN_GENERATED_KEYS);

            insertStatement.setString   (1, addressDetails.getStreet());
            insertStatement.setString   (2, addressDetails.getCity());
            insertStatement.setLong     (3, addressDetails.getPostalCode());
            insertStatement.executeUpdate();

            ResultSet autoGeneratedId = insertStatement.getGeneratedKeys();
            autoGeneratedId.next();
            addressDetails.setId(autoGeneratedId.getLong(1));

            if (addressDetails.getId() == 0) {
                exceptionList.add(AppErrorCode.ERROR_NOT_AUTO_GEN_ADDR_ID);
            }
            insertStatement.close();

        } catch (Exception createError) {
            throw new AppException(AppErrorCode.ERROR_CREATE_FAILED, createError);
        }

        if (!exceptionList.isEmpty()) {
            throw new AppException(exceptionList);
        }

        return addressDetails;
    }

    public List<Address> searchAddress(String[] searchField,
                                       String searchKeyword,
                                       String ...resultSetColumn) {

        String[] databaseColumn = new String[resultSetColumn.length];
        int index = 0;
        for (String resultColumn : resultSetColumn) {
            if (resultColumn.equalsIgnoreCase("id")) databaseColumn[index] = ID;
            if (resultColumn.equalsIgnoreCase("street")) databaseColumn[index] = STREET;
            if (resultColumn.equalsIgnoreCase("city")) databaseColumn[index] = CITY;
            if (resultColumn.equalsIgnoreCase("pin code")) databaseColumn[index] = POSTAL_CODE;
            index++;
        }

        String column = Arrays.toString(databaseColumn);
        String resultantColumn = column.substring(1, column.length() - 1);

        String[] searchFieldArray = new String[searchField.length];
        int searchFieldIndex = 0;
        for (String searchFieldName : searchField) {
            if (searchFieldName.equalsIgnoreCase("id")) searchFieldArray[searchFieldIndex] = ID;
            if (searchFieldName.equalsIgnoreCase("street")) searchFieldArray[searchFieldIndex] = STREET;
            if (searchFieldName.equalsIgnoreCase("city")) searchFieldArray[searchFieldIndex] = CITY;
            if (searchFieldName.equalsIgnoreCase("pin code")) searchFieldArray[searchFieldIndex] = POSTAL_CODE;
            searchFieldIndex++;
        }

        String searchQuery = String.format(SEARCH_ADDRESS_QUERY_FORMAT,
                                           resultantColumn,
                                           constructQuery(searchFieldArray));

        Connection connection = ConnectionSetup.connectionThread.get();
        List<Address> resultList = new ArrayList<>();

        try {
            PreparedStatement searchStatement = connection.prepareStatement(searchQuery);

            for (int fieldIndex = 1; fieldIndex <= searchFieldArray.length; fieldIndex++) {
                searchStatement.setString(fieldIndex,"%" + searchKeyword + "%");
            }
            ResultSet searchResult = searchStatement.executeQuery();

            if (searchResult.next() == true) {
                searchResult.beforeFirst();
                while (searchResult.next()) {
                    Address addressDetails = new Address();

                    for(String columnName : databaseColumn) {
                        if (columnName.equalsIgnoreCase(ID)) {
                            addressDetails.setId(searchResult.getLong(columnName));
                        }
                        if (columnName.equalsIgnoreCase(STREET)) {
                            addressDetails.setStreet(searchResult.getString(columnName));
                        }
                        if (columnName.equalsIgnoreCase(CITY)) {
                            addressDetails.setCity(searchResult.getString(columnName));
                        }
                        if (columnName.equalsIgnoreCase(POSTAL_CODE)) {
                            addressDetails.setPostalCode(searchResult.getInt(columnName));
                        }
                    }
                    resultList.add(addressDetails);
                }
                searchResult.close();
                searchStatement.close();
            } else {
                throw new AppException(AppErrorCode.ERROR_NO_RECORD_FOUND);
            }

        } catch (Exception searchError) {
            if (searchError instanceof AppException) {
                AppException appExcp = (AppException) searchError;
                throw new AppException(appExcp.getExceptionList());
            }
            throw new AppException(AppErrorCode.ERROR_SEARCH_FAILED, searchError);
        }

        return resultList;
    }

    private String constructQuery(String[] fields) {
        StringBuilder sb = new StringBuilder();
        for(String fieldName : fields) {
            sb.append(fieldName + " LIKE ? OR ");
        }
        String searchFieldQuery = sb.subSequence(0, sb.length() - 4).toString();
        return searchFieldQuery;
    }

    public Address readAddress(Address addressId) {

        Connection connection = ConnectionSetup.connectionThread.get();
        Address addressDetails = new Address();

        try {
            PreparedStatement readStatement = connection.prepareStatement(READ_ADDRESS_QUERY);
            readStatement.setObject(1, addressId.getId());
            ResultSet readResult = readStatement.executeQuery();

            if (readResult.next()) {
                addressDetails = construtAddress(readResult);
                readResult.close();
                readStatement.close();
            } else {
                throw new AppException(AppErrorCode.ERROR_NO_RECORD_FOUND);
            }

        } catch (Exception readError) {
            if (readError instanceof AppException) {
                AppException appExcp = (AppException) readError;
                throw new AppException(appExcp.getExceptionList());
            }
            throw new AppException(AppErrorCode.ERROR_READ_FAILED, readError);
        }

        return addressDetails ;
    }

    public List<Address> readAllAddress() {

        Connection connection = ConnectionSetup.connectionThread.get();
        List<Address> recordList = new ArrayList<>();

        try {
            PreparedStatement readAllStatement = connection.prepareStatement(READ_ALL_ADDRESS_QUERY);
            ResultSet readAllResult = readAllStatement.executeQuery();

            if (readAllResult.next() == true) {
                readAllResult.beforeFirst();
                while (readAllResult.next()) {
                    Address addressDetails = construtAddress(readAllResult);
                    recordList.add(addressDetails);
                }
                readAllResult.close();
                readAllStatement.close();
            } else {
                throw new AppException(AppErrorCode.ERROR_NO_RECORD_FOUND);
            }

        } catch (Exception readAllError) {
            if (readAllError instanceof AppException) {
                AppException appExcp = (AppException) readAllError;
                throw new AppException(appExcp.getExceptionList());
            }
            throw new AppException(AppErrorCode.ERROR_READ_ALL_FAILED, readAllError);
        }

        return recordList;
    }

    private Address construtAddress(ResultSet resultSet) {
        Address addressDetails = new Address();
        try {
            addressDetails.setId         (resultSet.getLong(ID));
            addressDetails.setStreet     (resultSet.getString(STREET));
            addressDetails.setCity       (resultSet.getString(CITY));
            addressDetails.setPostalCode (resultSet.getInt(POSTAL_CODE));
            return addressDetails;

        } catch(Exception constructError) {
            throw new AppException(constructError);
        }
    }

    public Address updateAddress(Address addressDetails) {

        Connection connection = ConnectionSetup.connectionThread.get();
        List<AppErrorCode> exceptionList = validateAddress(addressDetails, connection);
        if(!exceptionList.isEmpty()) {
            throw new AppException(exceptionList);
        }

        Address updatedAddressDetails;
        try {
            PreparedStatement updateStatement = connection.prepareStatement(UPDATE_ADDRESS_QUERY);
            updateStatement.setString(1, addressDetails.getStreet());
            updateStatement.setString(2, addressDetails.getCity());
            updateStatement.setInt(3, addressDetails.getPostalCode());
            updateStatement.setLong(4, addressDetails.getId());

            updateStatement.executeUpdate();
            updatedAddressDetails = readAddress(addressDetails);
            updateStatement.close();

        } catch (Exception updateError) {
            throw new AppException(AppErrorCode.ERROR_UPDATE_FAILED, updateError);
        }

        return updatedAddressDetails;
    }

    public Address deleteAddress(Address addressDetails) {

        Connection connection = ConnectionSetup.connectionThread.get();
        try {
            PreparedStatement deleteStatement = connection.prepareStatement(DELETE_ADDRESS_QUERY);
            deleteStatement.setLong(1, addressDetails.getId());
            Address deletedAddressDetails = readAddress(addressDetails);
            deleteStatement.executeUpdate();
            deleteStatement.close();
            return deletedAddressDetails;

        } catch (Exception deleteError) {
            throw new AppException(AppErrorCode.ERROR_DELETE_FAILED, deleteError);
        }
    }
}
