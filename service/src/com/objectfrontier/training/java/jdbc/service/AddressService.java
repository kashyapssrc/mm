/**
 *
 */
package com.objectfrontier.training.java.jdbc.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;


/**
 * @author mohammed.mohammed
 * @since  Oct 6, 2018
 */
public class AddressService {

    private boolean isEmpty(String stringToBeChecked) {
        return Objects.isNull(stringToBeChecked) || stringToBeChecked.equals("");
    }

    public List<AppErrorCode> validateAddress(Address addressDetails, Connection connection) throws Exception {
        List<AppErrorCode> exceptionList = new ArrayList<>();

        if (isEmpty(addressDetails.street)) {
            exceptionList.add(AppErrorCode.ERROR_NULL_STREET);
        }

        if (isEmpty(addressDetails.city)) {
            exceptionList.add(AppErrorCode.ERROR_NULL_CITY);
        }

        if (addressDetails.postalCode == 0) {
            exceptionList.add(AppErrorCode.ERROR_NULL_POSTAL_CODE);
        }

        return exceptionList;
    }

    public Address createAddress(Address addressDetails, Connection connection) throws Exception {

        List<AppErrorCode> exceptionList = validateAddress(addressDetails, connection);

        String insertQuery = new StringBuilder("INSERT INTO jdbc_address").append("(street, city, postal_code)")
                                                                          .append(" VALUES (?,?,?);")
                                                                          .toString();

        try {
            PreparedStatement insertStatement =  connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);

            insertStatement.setString   (1, addressDetails.street);
            insertStatement.setString   (2, addressDetails.city);
            insertStatement.setLong     (3, addressDetails.postalCode);
            insertStatement.executeUpdate();

            ResultSet autoGeneratedId = insertStatement.getGeneratedKeys();
            autoGeneratedId.next();
            addressDetails.setId(autoGeneratedId.getLong(1));

            if (addressDetails.id == 0) {
                exceptionList.add(AppErrorCode.ERROR_NOT_AUTO_GEN_ADDR_ID);
            }
            insertStatement.close();

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        if (!exceptionList.isEmpty()) {
            throw new AppException(exceptionList);
        }

        return addressDetails;
    }

    public List<Address> searchAddress(String[] searchField,
                                       String searchKeyword,
                                       Connection connection,
                                       String ...resultSetColumn) throws Exception {

        String[] databaseColumn = new String[resultSetColumn.length];
        int index = 0;
        for (String resultColumn : resultSetColumn) {
            if (resultColumn.equalsIgnoreCase("id")) databaseColumn[index] = "id";
            if (resultColumn.equalsIgnoreCase("street")) databaseColumn[index] = "street";
            if (resultColumn.equalsIgnoreCase("city")) databaseColumn[index] = "city";
            if (resultColumn.equalsIgnoreCase("pin code")) databaseColumn[index] = "postal_code";
            index++;
        }

        String column = Arrays.toString(databaseColumn);
        String resultantColumn = column.substring(1, column.length() - 1);

        String[] searchFieldArray = new String[searchField.length];
        int searchFieldIndex = 0;
        for (String searchFieldName : searchField) {
            if (searchFieldName.equalsIgnoreCase("id")) searchFieldArray[searchFieldIndex] = "id";
            if (searchFieldName.equalsIgnoreCase("street")) searchFieldArray[searchFieldIndex] = "street";
            if (searchFieldName.equalsIgnoreCase("city")) searchFieldArray[searchFieldIndex] = "city";
            if (searchFieldName.equalsIgnoreCase("pin code")) searchFieldArray[searchFieldIndex] = "postal_code";
            searchFieldIndex++;
        }

        String searchQuery = String.format("SELECT %s FROM jdbc_address WHERE %s;",
                                           resultantColumn,
                                           constructQuery(searchFieldArray));

        List<Address> resultList = new ArrayList<>();

        try {
            PreparedStatement searchStatement = connection.prepareStatement(searchQuery);

            for (int fieldIndex = 1; fieldIndex <= searchFieldArray.length; fieldIndex++) {
                searchStatement.setString(fieldIndex,"%" + searchKeyword + "%");
            }
            ResultSet searchResult = searchStatement.executeQuery();

            while (searchResult.next()) {
                Address addressDetails = new Address();

                for(String columnName : databaseColumn) {
                    if (columnName.equalsIgnoreCase("id")) {
                        addressDetails.setId(searchResult.getLong(columnName));
                    }
                    if (columnName.equalsIgnoreCase("street")) {
                        addressDetails.setStreet(searchResult.getString(columnName));
                    }
                    if (columnName.equalsIgnoreCase("city")) {
                        addressDetails.setCity(searchResult.getString(columnName));
                    }
                    if (columnName.equalsIgnoreCase("postal_code")) {
                        addressDetails.setPostalCode(searchResult.getInt(columnName));
                    }
                }
                resultList.add(addressDetails);
            }

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        return resultList;
    }

    private String constructQuery(String[] fields) {
        StringBuilder sb = new StringBuilder();
        for(String fieldName : fields) {
            sb.append(fieldName + " LIKE ? OR ");
        }
        String searchFieldQuery = sb.subSequence(0, sb.length() - 4).toString();
        return searchFieldQuery;
    }

    public Address readAddress(Address addressId, Connection connection) throws Exception {

        String readQuery = new StringBuilder("SELECT ").append("id, street, city, postal_code ")
                                                       .append("FROM jdbc_address WHERE ")
                                                       .append("id = ?;")
                                                       .toString();
        Address addressDetails = new Address();

        try {
            PreparedStatement readStatement = connection.prepareStatement(readQuery);
            readStatement.setObject(1, addressId.id);
            ResultSet result = readStatement.executeQuery();

            result.next();
            addressDetails = construtAddress(result);

            result.close();
            readStatement.close();

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        return addressDetails ;
    }

    private Address construtAddress(ResultSet resultSet) throws SQLException {
        Address addressDetails = new Address();

        addressDetails.setId         (resultSet.getLong(1));
        addressDetails.setStreet     (resultSet.getString(2));
        addressDetails.setCity       (resultSet.getString(3));
        addressDetails.setPostalCode (resultSet.getInt(4));

        return addressDetails;
    }

    public List<Address> readAllAddress(Connection connection) throws Exception {

        String readAllQuery = "SELECT id, street, city, postal_code FROM jdbc_address;";
        List<Address> recordList = new ArrayList<>();

        try {
            PreparedStatement readStatement = connection.prepareStatement(readAllQuery);
            ResultSet result = readStatement.executeQuery();

            while (result.next()) {
                Address addressDetails = construtAddress(result);
                recordList.add(addressDetails);
            }

            result.close();
            readStatement.close();

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        return recordList;
    }

    public Address updateAddress(Address addressDetails, Connection connection) throws Exception {

        List<AppErrorCode> exceptionList = validateAddress(addressDetails, connection);
        if(!exceptionList.isEmpty()) {
            throw new AppException(exceptionList);
        }

        String updateQuery = new StringBuilder("UPDATE jdbc_address SET ").append("street = ?, ")
                                                                          .append("city = ?, ")
                                                                          .append("postal_code = ? ")
                                                                          .append("WHERE ")
                                                                          .append("id = ?;")
                                                                          .toString();
        Address updatedAddressDetails;
        try {
            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
            updateStatement.setString(1, addressDetails.street);
            updateStatement.setString(2, addressDetails.city);
            updateStatement.setInt(3, addressDetails.postalCode);
            updateStatement.setLong(4, addressDetails.id);

            updateStatement.executeUpdate();
            updatedAddressDetails = readAddress(addressDetails, connection);
            updateStatement.close();

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        return updatedAddressDetails;
    }

    public Address deleteAddress(Address addressDetails, Connection connection) throws Exception {

        String deleteQuery = "DELETE FROM jdbc_address WHERE id = ?;";
        Address deletedAddressDetails;

        try {
            PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            deleteStatement.setLong(1, addressDetails.id);
            deletedAddressDetails = readAddress(addressDetails, connection);
            deleteStatement.executeUpdate();
            deleteStatement.close();

        } catch (SQLException dbError) {
            throw new AppException(AppErrorCode.ERROR_DATABASE, dbError);
        }

        return deletedAddressDetails;
    }

    public static void main(String[] args) throws Exception {
        AddressService addressService = new AddressService();
        ConnectionSetup connection = new ConnectionSetup();
        Connection connect = connection.setConnection();
//        Address addressDetails1 = new Address("Anupratap Colony", "", 323307);
//        Address addressDetails2 = new Address("Vaishali", "Delhi", 201204);
//        Address addressDetails3 = new Address("Taramani", "Chennai", 242048);
//        try {
//            Address add = addressService.createAddress(addressDetails1, connect);
//            System.out.println(add.toString());
//        } catch (AppException err) {
//          List<AppException> exceptionList = err.getExceptionList();
//          exceptionList.forEach(System.out::println);
//        }
//        System.out.println(addressService.insertAddressValue(addressDetails2, connect));
//        System.out.println(addressService.insertAddressValue(addressDetails3, connect));
        Object value = "ta";
//        Object anotherValue = "'Delhi'";
        String[] fields = {"street", "city"};
//        System.out.println(addressService.readAddressValue("city", value, connect));
//        List<Address> temp = addressService.readAllAddress(connect);
//        for (Address address : temp) {
//            System.out.println(address);
//        }
//        try {
        List<Address> temp = addressService.searchAddress(fields, "hi", connect, "id", "street", "city", "pin code");
//        } catch (AppException e) {
//            System.out.println(e.getErrorMessage() + " : " + e.getCause());
//        }
        for (Address address : temp) {
            System.out.println(address);
        }
//        for (Address tempAddr : temp) {
//            System.out.println(temp.id + "\t" + temp.street + "\t" + temp.city + "\t" + temp.postalCode);
//        }
//        Address update = addressService.updateAddress(new Address("Vaishali", "Delhi", 201204), connect);
//        Address update = addressService.deleteAddressValue("street", value, connect);
//        System.out.println(update.toString());

    }
}
